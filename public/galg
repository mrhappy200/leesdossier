<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Hangman</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="Hangman game" />
    <style>
      * {
        box-sizing: border-box;
      }
      body {
        padding: 16px;
        font-family: 'Arial Black', sans-serif;
        font-size: 100%;
      }

      header {
        text-align: center;
      }

      h1 {
        display: inline-block;
        position: relative;
        margin: 0 0 2rem 0;
        text-align: center;
        text-transform: uppercase;
        letter-spacing: 2px;
        cursor: default;
        user-select: none;
        transition: all 180ms ease;
      }

      h1:hover {
        color: rgb(0, 62, 230);
        letter-spacing: 4px;
        transform: scale(1.1) rotate(-4deg);
      }

      h1:before {
        height: 4px;
        content: ' ';
        display: block;
        position: absolute;
        bottom: 0;
        left: 100%;
        right: 0;
        transition: all 180ms ease;
      }

      h1:hover:before {
        left: 0;
        background: rgb(0, 62, 230);
      }

      footer {
        margin: 5rem 0 3rem;
        font-family: Arial, Arial, Helvetica, sans-serif;
        color: gray;
        line-height: 1.5;
        text-align: center;
      }

      footer a {
        color: rgb(0, 62, 230);
        text-decoration: none;
      }

      footer a:hover {
        text-decoration: underline;
      }
    </style>

    <style>
      .chars {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-end;
        justify-content: center;
        padding: 3rem 1rem;
      }

      .chars__char {
        width: 2.6rem;
        height: 3rem;
        flex-shrink: 0;
        display: block;
        margin: 0 0.5rem 0.5rem 0;
        padding: 0.25rem;
        border: 0 solid rgb(0, 62, 230);
        border-bottom-width: 3px;
        font-size: 1.5rem;
        text-align: center;
      }

      .chars__char--is-letter {
        border-width: 2px 2px 4px 2px;
      }
    </style>

    <style>
      .keyboard {
        width: 100%;
        max-width: 30rem;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-end;
        justify-content: center;
        margin: 0 auto;
        padding: 1rem;
      }

      .keyboard__key {
        width: 3rem;
        margin: 0 0.5rem 0.5rem 0;
        padding: 0.5rem 0;
        border-radius: 3px;
        outline: none;
        border: none;
        background-color: rgba(0, 62, 230, 0.07);
        color: rgb(0, 62, 230);
        font: inherit;
        font-size: 1.3rem;
        text-align: center;
        cursor: pointer;
      }

      .keyboard__key--found {
        background-color: rgba(102, 226, 213, 0.07);
        color: rgb(102, 226, 213);
        cursor: default;
      }

      .keyboard__key--is-faulty {
        background-color: rgba(254, 0, 0, 0.07);
        color: rgb(254, 0, 0);
        cursor: default;
      }
    </style>

    <style>
      .drawing {
        max-width: 80rem;
        margin: 0 auto;
        border: 3px solid rgb(0, 62, 230);
        box-shadow: 5px 5px 0 1px rgb(0, 47, 179);
        padding: 1rem;
        text-align: center;
      }

      .drawing__container {
        width: 20rem;
        max-width: 100%;
        height: 18rem;
        display: inline-block;
        position: relative;
        border-bottom: 3px solid black;
      }

      .drawing__message {
        margin-top: 1.5rem;
        font-size: 1.3rem;
        text-align: center;
      }

      .drawing__part {
        position: absolute;
      }

      .drawing__part-1 {
        width: 3px;
        top: 0;
        bottom: 0;
        left: 0;
        background-color: black;
      }

      .drawing__part-2 {
        height: 3px;
        top: 0;
        right: 50%;
        left: 0;
        background-color: black;
      }

      .drawing__part-3 {
        width: 3px;
        height: 15%;
        top: 0;
        left: 50%;
        background-color: black;
      }

      .drawing__part-4 {
        width: 2.5rem;
        height: 2.5rem;
        top: 15%;
        left: calc(50% - 1.25rem + 1.5px);
        border-radius: 100%;
        border: 3px solid black;
      }

      .drawing__part-5 {
        width: 3px;
        height: 30%;
        top: calc(15% + 2.5rem);
        left: 50%;
        background-color: black;
      }

      .drawing__part-6a,
      .drawing__part-6b {
        width: 10%;
        height: 3px;
        top: calc(15% + 2.5rem + 1.5rem);
        background-color: black;
      }

      .drawing__part-6a {
        left: calc(50% - 10% + 1.5px);
        transform-origin: right center;
        transform: rotate(20deg);
      }

      .drawing__part-6b {
        left: calc(50% + 1.5px);
        transform-origin: left center;
        transform: rotate(-20deg);
      }

      .drawing__part-7a,
      .drawing__part-7b {
        width: 25%;
        height: 3px;
        top: calc(45% + 2.5rem - 3px);
        background-color: black;
      }

      .drawing__part-7a {
        left: calc(50% - 25% + 1.5px);
        transform-origin: right center;
        transform: rotate(-55deg);
      }

      .drawing__part-7b {
        left: calc(50% + 1.5px);
        transform-origin: left center;
        transform: rotate(55deg);
      }
    </style>

    <style>
      .modal {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .modal__background {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: rgba(0, 0, 0, 0.6);
      }

      .modal__main {
        width: 24rem;
        z-index: 1;
        box-shadow: 5px 5px 0 1px rgb(0, 47, 179);
        border: 3px solid rgb(0, 62, 230);
        padding: 2rem;
        background-color: white;
      }

      .modal__content {
        font-size: 1.2rem;
        line-height: 2rem;
        text-align: center;
      }

      .modal__content em {
        color: rgb(0, 62, 230);
      }

      .modal__actions {
        margin-top: 2rem;
        text-align: center;
      }

      .modal__actions button {
        margin: 0;
        padding: 0.5rem 1rem;
        outline: none;
        border: none;
        background-color: rgb(0, 62, 230);
        color: white;
        font: inherit;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Hangman</h1>
    </header>
    <div id="hangman">
      <div class="drawing" id="drawing">
        <div class="drawing__container"></div>
        <div class="drawing__message"></div>
      </div>
      <div id="result"></div>
    </div>
    <div id="board">
      <div id="chars" class="chars"></div>
      <div id="keyboard" class="keyboard"></div>
    </div>
    <div id="modal" class="modal" style="display: none">
      <div class="modal__background"></div>
      <div class="modal__main">
        <div class="modal__content"></div>
        <div class="modal__actions">
          <button onclick="reinitGame()">Play New Game</button>
        </div>
      </div>
    </div>
    <footer>
      Developed by <a href="https://sandroroth.com">sandroroth</a> for
      <a href="https://metroxe.github.io/one-html-page-challenge/">one html page challenge</a>
    </footer>

    <script>
      let game = null;
      const MAX_FAULTS = 9;
      const wordList = ["cheerful", "hop", "creator", "exist", "outgoing", "literate", "leg", "tendency", "equable", "planes", "overt", "disturbed", "pollution", "grouchy", "zebra", "magical", "previous", "quarrelsome", "label", "dad", "sticks", "calendar", "numerous", "stroke", "toothbrush", "sheep", "treatment", "gifted", "meddle", "women", "sloppy", "class", "cynical", "aloof", "courageous", "attractive", "chickens", "eminent", "jam", "smoke", "ill", "harsh", "upbeat", "pig", "pack", "ducks", "pray", "itch", "ignore", "scissors", "sink", "competition", "tough", "receive", "sedate", "lush", "ignorant", "sparkle", "lackadaisical", "fade", "silly", "exuberant", "crazy", "dogs", "tedious", "vagabond", "breakable", "overjoyed", "home", "embarrassed", "deserve", "supreme", "handle", "scene", "spark", "squeeze", "auspicious", "collar", "receipt", "pail", "sturdy", "head", "waves", "noiseless", "slimy", "lopsided", "anxious", "godly", "bent", "exclusive", "amazing", "incredible", "remarkable", "opposite", "rainstorm", "abaft", "panicky", "canvas", "market", "grease", "curved", "maniacal", "precede", "foregoing", "youthful", "engine", "adaptable", "desire", "men", "apologise", "rail", "madly", "peep", "call", "touch", "hulking", "great", "ink", "chop", "statuesque", "hideous", "question", "accidental", "avoid", "damp", "warlike", "window", "calculator", "cough", "safe", "crook", "easy", "bore", "dare", "acrid", "elbow", "wealth", "telephone", "sack", "sky", "calculating", "cast", "remove", "wrestle", "start", "plane", "abnormal", "five", "sea", "wreck", "bird", "intend", "truculent", "cattle", "cure", "comb", "teeny", "lock", "aberrant", "merciful", "irritate", "elite", "poison", "tramp", "beg", "hour", "deer", "muddle", "donkey", "weigh", "cagey", "ants", "glossy", "tray", "peaceful", "relation", "dinosaurs", "punch", "hand", "mailbox", "punishment", "add", "painstaking", "snake", "natural", "shave", "scientific", "drop", "secretary", "guarded", "lethal", "aromatic", "cent", "riddle", "phobic", "venomous", "inconclusive", "utopian", "try", "accept", "fairies", "chalk", "gainful", "vanish", "blue-eyed", "wide-eyed", "swanky", "route", "punish", "adhesive", "ragged", "obey", "lacking", "vacation", "bang", "unusual", "nimble", "note", "mix", "gigantic", "station", "jar", "pumped", "taste", "full", "tour", "luxuriant", "house", "mess up", "title", "tie", "bulb", "humdrum", "sail", "selfish", "type", "direful", "comparison", "distance", "homeless", "crime", "system", "release", "pointless", "loss", "cakes", "morning", "nation", "lick", "doubtful", "protect", "applaud", "decorous", "hungry", "pop", "parched", "balance", "continue", "attempt", "stereotyped", "tin", "necessary", "pencil", "soak", "limping", "quarter", "pedal", "quince", "frog", "air", "fine", "flowers", "arch", "puny", "tickle", "innate", "noise", "shape", "gorgeous", "icy", "standing", "flaky", "raise", "unequaled", "nerve", "design", "defiant", "exercise", "repulsive", "knotty", "top", "jittery", "digestion", "fail", "moaning", "ahead", "discovery", "bike", "shoe", "bury", "rice", "jail", "curve", "shade", "agonizing", "point", "rejoice", "curtain", "yellow", "rigid", "shivering", "example", "inject", "giant", "grandiose", "stitch", "talk", "outstanding", "unwieldy", "rake", "matter", "snow", "territory", "name", "fuzzy", "well-groomed", "knowing", "meaty", "elfin", "substantial", "dry", "obscene", "past", "sock", "tank", "stuff", "ticket", "spot", "talented", "furtive", "grade", "gusty", "terrific", "numberless", "beds", "helpless", "surround", "scintillating", "trite", "pets", "pipe", "agree", "hurry", "borrow", "ocean", "effect", "church", "witty", "scribble", "smile", "spoil", "shirt", "beneficial", "judicious", "knot", "food", "nervous", "actor", "elastic", "raspy", "happen", "likeable", "excited", "minister", "playground", "stranger", "strong", "murky", "behave", "far", "ask", "doll", "foamy", "null", "existence", "babies", "scratch", "act", "baby", "alert", "needless", "behavior", "cherry", "finger", "meal", "satisfy", "puzzled", "suggestion", "infamous", "tearful", "vivacious", "faithful", "bee", "painful", "twist", "airplane", "shake", "wiggly", "carriage", "slope", "volleyball", "tow", "resonant", "right", "harm", "coil", "stir", "cannon", "sun", "hypnotic", "meek", "fascinated", "sponge", "stream", "soggy", "complain", "greasy", "physical", "hurt", "ossified", "sugar", "close", "alive", "snakes", "warm", "ripe", "misty", "festive", "dirt", "stupendous", "hunt", "cheer", "lunchroom", "taboo", "useless", "spare", "branch", "homely", "frightening", "mice", "downtown", "duck", "tidy", "whispering", "pen", "potato", "tall", "instruct", "dog", "burly", "horrible", "grip", "boil", "historical", "delight", "burst", "concern", "uninterested", "round", "scarecrow", "drag", "ill-informed", "awesome", "medical", "reject", "curly", "wooden", "ludicrous", "memorize", "dapper", "fish", "delicate", "abject", "tremble", "throne", "notebook", "kettle", "sparkling", "rhyme", "bag", "elated", "achiever", "cars", "famous", "female", "show", "vegetable", "wrist", "permit", "current", "remain", "play", "momentous", "search", "wall", "pan", "reward", "learned", "coal", "plate", "overflow", "horn", "afraid", "deep", "educate", "powder", "annoyed", "expand", "week", "regular", "toe", "whole", "eye", "detailed", "rob", "resolute", "four", "zipper", "unruly", "honey", "snatch", "loaf", "holiday", "squeamish", "airport", "grape", "groan", "describe", "bizarre", "short", "screw", "day", "trust", "crayon", "quartz", "lyrical", "heady", "bumpy", "observation", "extend", "chubby", "sip", "impolite", "bleach", "billowy", "run", "feeble", "stone", "skin", "frighten", "battle", "illegal", "serious", "lumpy", "night", "aunt", "cats", "milky", "winter", "acidic", "nondescript", "unbecoming", "yarn", "queen", "toad", "terrify", "shrill", "glib", "crow", "ablaze", "oil", "cook", "harass", "shy", "staking", "arrest", "cactus", "magic", "sound", "purpose", "tiger", "rude", "disastrous", "flat", "clip", "imminent", "lucky", "ruin", "crash", "miniature", "spiky", "bite", "undress", "defective", "observant", "bead", "boy", "thick", "rest", "orange", "flight", "confess", "uppity", "theory", "political", "friends", "pickle", "aspiring", "swift", "absorbing", "save", "tick", "wound", "report", "ambitious", "explode", "envious", "wrong", "voice", "malicious", "colossal", "nippy", "war", "flimsy", "basin", "smooth", "halting", "ready", "blue", "hole", "industry", "straight", "edge", "cloistered", "graceful", "wink", "mend", "scary", "underwear", "garrulous", "train", "recognise", "boiling", "salt", "cart", "brash", "scale", "erratic", "smell", "humor", "hissing", "forgetful", "furniture", "double", "rapid", "separate", "step", "tongue", "argument", "wanting", "silent", "fire", "slow", "load", "rat", "month", "kitty", "shelf", "maid", "aggressive", "roasted", "development", "knock", "modern", "north", "tasteless", "grandfather", "seed", "jazzy", "thread", "spotless", "responsible", "aboriginal", "aware", "hapless", "calculate", "decisive", "transport", "wealthy", "join", "marble", "fit", "deranged", "uncovered", "cute", "arrive", "adamant", "guitar", "ashamed", "earsplitting", "realize", "special", "reach", "outrageous", "cow", "deadpan", "two", "sassy", "strap", "profit", "rod", "temper", "scare", "lace", "tempt", "wobble", "annoy", "weak", "basketball", "greedy", "bath", "examine", "refuse", "paint", "black", "cabbage", "hydrant", "fang", "overrated", "young", "actually", "pass", "threatening", "moan", "sofa", "fanatical", "macho", "bell", "identify", "demonic", "periodic", "ban", "light", "internal", "wire", "best", "cowardly", "intelligent", "marked", "whirl", "dance", "cheat", "pause", "strip", "sign", "land", "plucky", "protest", "word", "soda", "porter", "freezing", "strengthen", "gaudy", "inquisitive", "steadfast", "alluring", "glistening", "trouble", "fill", "jolly", "follow", "watery", "coast", "fabulous", "tiresome", "voracious", "accessible", "straw", "daily", "average", "locket", "bow", "thaw", "versed", "womanly", "thing", "pat", "owe", "waste", "wool", "birthday", "stiff", "subdued", "girls", "uptight", "supply", "sheet", "brush", "bare", "friction", "seemly", "economic", "vessel", "next", "highfalutin", "appear", "return", "silky", "complex", "giants", "gold", "plain", "acoustics", "swim", "mug", "protective", "twig", "illustrious", "rabbit", "energetic", "tug", "sulky", "post", "plant", "saw", "replace", "lighten", "flesh", "nebulous", "handy", "education", "radiate", "basket", "argue", "bat", "prose", "nine", "pine", "baseball", "toys", "ten", "dynamic", "hall", "heavenly", "little", "prepare", "influence", "thankful", "quiver", "servant", "bashful", "cat", "acid", "domineering", "noisy", "suspect", "optimal", "penitent", "milk", "ruthless", "unsuitable", "present", "unpack", "desert", "arithmetic", "cake", "fax", "claim", "various", "ambiguous", "butter", "tent", "rings", "amount", "thin", "volcano", "pet", "annoying", "interesting", "inform", "injure", "craven", "shaky", "hate", "deceive", "prevent", "switch", "sweater", "pigs", "woozy", "stay", "cap", "few", "glamorous", "disapprove", "society", "buzz", "fluttering", "reminiscent", "dizzy", "spray", "care", "bikes", "brass", "righteous", "jewel", "ajar", "whisper", "guttural", "substance", "gaze", "helpful", "tremendous", "destroy", "mighty", "want", "own", "suspend", "farm", "trucks", "quirky", "arrogant", "seal", "adjustment", "hospital", "tense", "last", "jagged", "frequent", "pleasant", "perform", "fireman", "debt", "known", "country", "surprise", "ice", "gamy", "condemned", "narrow", "decision", "year", "time", "knee", "panoramic", "tranquil", "cobweb", "flow", "wait", "enthusiastic", "tame", "badge", "chief", "file", "fumbling", "bouncy", "rub", "trousers", "queue", "truck", "instrument", "excite", "sophisticated", "growth", "book", "efficient", "well-off", "square", "harmony", "settle", "fierce", "soap", "sister", "vigorous", "cause", "son", "unused", "rotten", "notice", "damaged", "beef", "blushing", "jump", "hospitable", "aback", "berserk", "parallel", "grumpy", "delirious"];

      function reinitGame() {
        game = initNewGame();
      }

      function hideModal() {
        const modal = document.getElementById('modal');
        modal.style.display = 'none';
      }

      function showModal(content) {
        const modal = document.getElementById('modal');
        const modalContent = modal.querySelector('.modal__content');
        modalContent.innerHTML = content;
        setTimeout(() => (modal.style.display = ''), 300);
      }

      function gameEndHandler() {
        const content = game.hasWon()
          ? `Great, you are a winner!`
          : `Oh no, you messed up! We were looking for <em>${game.getWord()}</em>.`;
        showModal(content);
      }

      function initNewGame() {
        const hangman = new Hangman(getRandomWord(), gameEndHandler);
        hideModal();
        drawGame(hangman);
        return hangman;
      }

      function getRandomWord() {
        const index = Math.floor(Math.random() * wordList.length);
        return wordList[index];
      }

      function guessLetter(letter) {
        if (game && !game.isFinished()) {
          game.pickedLetter(letter);
          drawGame(game);
        }
      }

      function drawHangman(faults) {
        const parts = [
          '<div class="drawing__part drawing__part-1"></div>',
          '<div class="drawing__part drawing__part-2"></div>',
          '<div class="drawing__part drawing__part-3"></div>',
          '<div class="drawing__part drawing__part-4"></div>',
          '<div class="drawing__part drawing__part-5"></div>',
          `<div class="drawing__part drawing__part-6a"></div>`,
          `<div class="drawing__part drawing__part-6b"></div>`,
          `<div class="drawing__part drawing__part-7a"></div>`,
          `<div class="drawing__part drawing__part-7b"></div>`,
        ];

        const visibleParts = parts.splice(0, faults);
        const parent = document.querySelector('#drawing .drawing__container');
        parent.innerHTML = visibleParts.join('');
      }

      function drawResult(faults) {
        const texts = [
          /* 0 */ "Let's find that word!",
          /* 1 */ "Let's hang out.",
          /* 2 */ "Don't worry, everything is fine.",
          /* 3 */ "Don't worry, everything is fine.",
          /* 4 */ "Don't worry, everything is fine.",
          /* 5 */ 'Ooh... be careful!',
          /* 6 */ "That's not good!",
          /* 7 */ 'OMG!!!',
          /* 8 */ 'HEEEELP!',
          /* 9 */ 'R.I.P.',
        ];

        const container = document.querySelector('#drawing .drawing__message');
        container.innerText = texts[faults];
      }

      function drawKeyboard(foundLetters, faultyLetters) {
        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
        const keys = letters.map(letter => {
          const found = foundLetters.includes(letter);
          const faulty = faultyLetters.includes(letter);
          return { letter, found, faulty };
        });

        const parent = document.getElementById('keyboard');
        parent.innerHTML = '';
        keys.map(key => {
          const el = document.createElement('button');
          el.innerText = key.letter;
          el.disabled = key.found || key.faulty;
          el.className = 'keyboard__key';
          key.found && el.classList.add('keyboard__key--found');
          key.faulty && el.classList.add('keyboard__key--is-faulty');

          el.onclick = () => {
            guessLetter(key.letter);
          };

          parent.appendChild(el);
        });
      }

      function drawCharList(chars) {
        const parent = document.getElementById('chars');
        parent.innerHTML = '';

        chars.forEach(char => {
          const charEl = document.createElement('div');
          charEl.className = `chars__char ${char.isLetter ? 'chars__char--is-letter' : ''}`;
          charEl.innerText = char.show ? char.value : '';
          parent.appendChild(charEl);
        });
      }

      function drawGame(hangman) {
        drawResult(hangman.getNumberOfFaults());
        drawHangman(hangman.getNumberOfFaults());
        drawCharList(hangman.getCharList());
        drawKeyboard(hangman.getFoundLetters(), hangman.getFaultyLetters());
      }

      function listenForInputs(callback) {
        window.addEventListener('keydown', event => {
          const pressedOtherKey = event.altKey || event.ctrlKey || event.metaKey; // Shift key is allowed
          const key = event.key.toUpperCase();
          const isLetter = key.match(/[A-Z]/);
          !pressedOtherKey && isLetter && callback(key);
        });
      }

      class Hangman {
        constructor(word, onEndGame) {
          this.word = word.toUpperCase();
          this.pickedLetters = [];
          this.faults = 0;
          this.onEndGame = onEndGame;
        }

        getWord() {
          return this.word;
        }

        getCharsOfWord() {
          return this.word.split('');
        }

        getLettersOfWord() {
          const chars = this.getCharsOfWord();
          return chars
            .filter(char => char.match(/[A-Z]/))
            .filter((char, index, list) => list.indexOf(char) === index);
        }

        getNumberOfFaults() {
          return this.faults;
        }

        getFaultyLetters() {
          return this.pickedLetters.filter(letter => {
            return !this.word.includes(letter);
          });
        }

        getFoundLetters() {
          return this.pickedLetters.filter(letter => {
            return this.word.includes(letter);
          });
        }

        getCharList() {
          const chars = this.getCharsOfWord();
          return chars.map(char => {
            const isLetter = char.match(/[A-z]/);
            const pickedLetterAlready = this.pickedLetters.includes(char);
            const show = pickedLetterAlready || !isLetter;
            return { isLetter, show, value: char };
          });
        }

        pickedLetter(letter) {
          const alreadyPicked = this.pickedLetters.includes(letter);
          const contains = this.word.includes(letter);

          if (alreadyPicked) {
            console.log('Uuh, you already picked that letter');
            return;
          }

          this.pickedLetters.push(letter);

          if (contains) {
            console.log('Yeah, you are great!');
          } else {
            console.log('Oh no, try it again');
            this.pickedLetters.push(letter);
            this.faults += 1;
          }

          if (this.isFinished()) {
            this.onEndGame();
          }
        }

        hasWon() {
          const letters = this.getLettersOfWord();
          return (
            !this.hasLost() &&
            letters.every(char => {
              return this.pickedLetters.includes(char);
            })
          );
        }

        hasLost() {
          return this.faults >= MAX_FAULTS;
        }

        isFinished() {
          return this.hasLost() || this.hasWon();
        }
      }

      game = initNewGame();
      listenForInputs(letter => {
        guessLetter(letter);
      });
    </script>
  </body>
</html>
